package eg.edu.alexu.csd.datastructure.linkedList.cs41_cs13;

import java.util.Scanner;
import java.util.LinkedList;
import java.awt.*;

public class call {

	public static void main(String[] args) {
		single x=new single ();
		Polynomial k=new Polynomial();
		node head=x.head;
		Scanner s=new Scanner(System.in);
		
		
		boolean e=true;
		
		while(e==true) {
		
		System.out.println("Please choose an action: ");
		System.out.println("----------------------- ");
		System.out.println("1- Set a polynomial variable ");
		System.out.println("2- Print the value of a polynomial variable ");
		System.out.println("3- Add two polynomials ");
		System.out.println("4- Subtract two polynomials ");
		System.out.println("5- Multiply two polynomials ");
		System.out.println("6- Evaluate a polynomial at some point ");
		System.out.println("7- Clear a polynomial variable ");
		System.out.println("8- Exit ");
		
		int t=0;
		char u ,n;
		t=s.nextInt();
		int j=0;
		int c=0;
		if(t==1) {
			
			System.out.println("Insert the variable name: A, B or C ");
			u=s.next().charAt(0);
			if(u!='A'&&u!='B'&&u!='C') {
				System.out.println("Run time exception ");
			}else {
			System.out.println("Insert the polynomial terms in the form: ");
			System.out.println("(coeff1, exponent1), (coeff2, exponent2), .. ");
			String y=s.next();
			String m="";
			int i=0;

  		for ( i=0; i < y.length(); i++) {
			    if(y.charAt(i)=='('||y.charAt(i)==')') {
			       continue;
			    }
			    m=m+y.charAt(i);
			}
  		
  		String [] a= m.split(",");
  		int []b =new int[a.length];
  		for(i=0;i<a.length;i++) {
  			b[i]=Integer.parseInt(a[i]);
  		}
  		int flag =1;
  		for ( i=1;i<b.length&&flag==1;i+=2){
        	flag=0;
            for( j=1;j<b.length-i-1;j+=2){
                if(b[j]>b[j+2]){
                    int  q=b[j];
                    b[j]=b[j+2];
                    b[j+2]=q;
                    
                    q=b[j-1];
                    b[j-1]=b[j+1];
                    b[j+1]=q;                   
                    flag=1;
                }
            }
  		}
  		int [][]arr=new int [b.length/2][2];
  		for(i=0;i<b.length;i++) {
  			System.out.println(b[i]);
  		}
  		int co=0;
  		for(i=0;i<b.length/2;i++) {
  			for(j=0;j<2;j++) {
  				arr[i][j]=b[co];
  				co ++ ;
  			}
  		}
  		
  		
  		k.setPolynomial(u, arr);
  				
		}
			
		}
		
		
		else if(t==2) {
			System.out.println("Insert the variable name: A, B or C ");
			u=s.next().charAt(0);
			if(u!='A'&&u!='B'&&u!='C') {
				System.out.println("Run time exception ");
			
			}else {
			String p = k.print(u);
			System.out.print(p);
			System.out.println();
			}
			
			
			
		}
		else if(t==3) {
			System.out.println("Insert first variable name: A, B or C ");	
			u=s.next().charAt(0);
			System.out.println("Insert second variable name: A, B or C ");
			n=s.next().charAt(0);
			if(u!='A'&&u!='B'&&u!='C') {
				System.out.println("Run time exception ");
			}
			else if(n!='A'&&n!='B'&&n!='C') {
				System.out.println("Run time exception ");
			}else {
				try {
			
			int [][] ar = k.add(u, n);
				}catch(IllegalArgumentException ff) {
					
				}
			}
			
		}
		else if(t==4) {
			System.out.println("Insert first variable name: A, B or C ");	
			u=s.next().charAt(0);
			System.out.println("Insert second variable name: A, B or C ");
			n=s.next().charAt(0);
			if(u!='A'&&u!='B'&&u!='C') {
				System.out.println("Run time exception ");
			}
			else if(n!='A'&&n!='B'&&n!='C') {
				System.out.println("Run time exception ");
			}else {
				try {
			int [][] ar = k.subtract(u, n);
				}catch(IllegalArgumentException ff) {
					
				}
			}
			
		}
		else if(t==5) {
			System.out.println("Insert first variable name: A, B or C ");	
			u=s.next().charAt(0);
			System.out.println("Insert second variable name: A, B or C ");
			n=s.next().charAt(0);
			try {
			if(u!='A'&&u!='B'&&u!='C') {
				System.out.println("Run time exception ");
			}
			else if(n!='A'&&n!='B'&&n!='C') {
				System.out.println("Run time exception ");
			}else {
			int [][] ar = k.multiply(u, n);
			for(j=0;j<ar.length;j++) {
				for(c=0;c<2;c++) {
					System.out.printf("%d ", ar[j][c]);
				}
				System.out.println();
			}
		}
			} catch (IllegalArgumentException ff) {
				
				
			}
		}
		
		
		
		
		else if(t==6) {
			System.out.println("Insert the variable name: A, B or C ");
			u=s.next().charAt(0);
			if(u!='A'&&u!='B'&&u!='C') {
				System.out.println("Run time exception ");
			}else {
				System.out.println("Enter the polynomial constant value:  ");
				int val = s.nextInt();
			float o = k.evaluatePolynomial(u, val);
			}
		}
		
		
		else if(t==7) {
			System.out.println("Insert the variable name: A, B or C ");
			
			u=s.next().charAt(0);
			if(u!='A'&&u!='B'&&u!='C') {
				System.out.println("Run time exception ");
			}else {
			k.clearPolynomial(u);
			}
			
		}
		else if(t==8) {
			e=false ;
		}
		else {
			System.out.println("Run time exception ");
		}
		
		
		
		
			
		
		
		
  		
		}
  		
  		

	
		
		
	}		

}






package eg.edu.alexu.csd.datastructure.linkedList.cs41_cs13;

public interface ILinkedList {
	public void add(int index, Object element);
	
	public void add(Object element);	
	
	public Object get(int index);
	
	public void set(int index, Object element);
	
	public void clear();
	
	public boolean isEmpty();
	
	public void remove(int index);
	
	public int size();
	
	public ILinkedList sublist(int fromIndex, int toIndex);
	
	public boolean contains(Object o);

}






package eg.edu.alexu.csd.datastructure.linkedList.cs41_cs13;


public class node {
	
	Object value ;
	node next =null;
	
	public node () {
		
	}
	
	public node (Object r) {
		this.value=r;
	}
	public Object getValue() {
		return value ;		
	}
	
	public node getNext() {
		return next ;
	}
	public void setvalue(Object k) {
		value=k;
	}
	public void setnext(node w) {
		next = w;
	}

}






package eg.edu.alexu.csd.datastructure.linkedList.cs41_cs13;


public class single implements ILinkedList{
	  node head=null;
	  public void add (int index,Object element ) {
		node w = new node (element);
		node t =head;
		if(index==0) {
			w.setnext(head);
			head=w;
		}else {
		for(int i=0;i<index -1;i++) {
			t=t.getNext();
		}
		w.setnext(t.getNext());
		t.setnext(w);
		
	}
	}

		public void add(Object element) {
			node t=head;
			node w = new node (element);
			if(head==null) {
				head=w;
			}else {
			while(t.getNext()!=null) {
				t=t.getNext();
			}
			t.setnext(w);
			}
			
		}
		
		public Object get (int index) {
			int i=0;
			node t=head;
			if(head==null) {
				return null;
			}
			while(i<=index) {
				if(i==index) {
					Object v=t.getValue();
					return v;
				}
				t=t.getNext();
				i++;
			}
			return null;
		}
		
		public void set(int index, Object element) {
			int i=0;
			node t=head;
			while(i<=index&&t!=null) {
				if(i==index) {
					t.setvalue(element);
				}
				t=t.getNext();
			}
		}
		
		public void clear() {
			node t=head;
			node temp=t;
			while(temp.next!=null) {
				temp=t.getNext();
				t.setnext(null);
				t=temp;
			}
			
		}
		public boolean isEmpty() {
			if(head==null) {
				return true ;
			}
			return false ;
		}
		
		public void remove(int index) {
			node t=head;
			
			if(index==0) {
				head=head.getNext();
				
			}else {
			 node current =head;
			for(int i=0;i<index-1;i++) {
				t=t.getNext();
			}
			current=t.getNext();
			t.setnext(current.getNext());
			}
			
		}
		
		public int size() {
			if(head==null) {
				return 0;
			}
			int count=0;
			node t=head;
			while(t!=null) {
				count++;
				t=t.next;
			}
			return count ;
		}
		
		public ILinkedList sublist(int fromIndex, int toIndex) {
			int i=0;
			node t=head;
			single x=new single();
			while(i<=toIndex) {
				if(i==fromIndex) {
					head=t;
				}
				if(i==toIndex) {
					t.setnext(null);
				}
				t=t.getNext();
			}
			return x;
			
		}
		
		public boolean contains(Object o) {
			node t=head;
			if(head==null) {
				return false ;
			}
			while(t!=null) {
				if(t.getValue()==o) {
					return true;
				}
				t=t.getNext();
			}
			return false;
		}
		
		
		
		
		
		
		
		
		
}






package eg.edu.alexu.csd.datastructure.linkedList.cs41_cs13;

public class Dnode {
	Object value;
	Dnode next,prev;
	
	public Dnode(Object r) {
		this.value =r;
	}
	public Object getValue() {
		return value ;		
	}
	
	public Dnode getNext() {
		return next ;
	}
	public void setvalue(Object k) {
		value=k;
	}
	public void setnext(Dnode w) {
		next = w;
	}
	
	public void setprev(Dnode a) {
		prev=a;
	}
	public Dnode  getprev(Dnode b) {
		return prev;
	}

}








package eg.edu.alexu.csd.datastructure.linkedList.cs41_cs13;

public class Double implements ILinkedList{
	
	Dnode header,trailer;
	public Double() {
		header = new Dnode(null); 
		trailer = new Dnode(null); 
		header.setnext(trailer); 

		}
	
	public void add (int index,Object element ) {
		Dnode w = new Dnode (element);
		Dnode t=header;
		t=t.getNext();
		Dnode y=header.getNext();
		if(index==0) {
			w.setnext(y);
			w.setprev(header);
			header.setnext(w);
			y.setprev(w);
		}else {
		for(int i=0;i<index -1;i++) {
			y=y.getNext();
		}
		w.setnext(y.getNext());
		y.setnext(w);
		w.setprev(y);
		y.getNext().setprev(w);
		
	}
	}
	
	public void add(Object element) {
		Dnode w = new Dnode (element);
		Dnode t=header.getNext();
		if(t==trailer) {
			w.setprev(header);
			w.setnext(trailer);
			trailer.setprev(w);
			header.setnext(w);
		}else {
		while(t.getNext()!=trailer) {
			t=t.getNext();
		}
		t.setnext(w);
		w.setprev(t);
		w.setnext(trailer);
		trailer.setprev(w);
		}
	}
	
	public Object get(int index) {
		int i=0;
		Dnode t=header.getNext();
		if(header.getNext()==trailer) {
			return null;
		}
		while(i<=index) {
			if(i==index) {
				return t.getValue();
			}
			t=t.getNext();
		}
		return null;
		
	}
	
	public void set(int index, Object element) {
		int i=0;
		Dnode t=header.getNext();
		
		while(i<=index&&t!=trailer) {
			if(i==index) {
				t.setvalue(element);
			}
			t=t.getNext();
		}
	}
	
	public void clear() {
		Dnode t=header;
		Dnode temp=t;
		while(temp!=trailer) {
			temp=t.getNext();
			t.setnext(null);
			t.setprev(null);
			t=temp;
		}
	}
	
	public boolean isEmpty() {
		if(header.getNext()==trailer) {
			return true;
		}
		return false ;
	}
	
	public void remove(int index) {
		Dnode t=header.getNext();
		Dnode current =header.getNext();
		for(int i=0;i<index-1;i++) {
			t=t.getNext();
		}
		current=t.getNext();
		current.getNext().setprev(t);
		t.setnext(current.getNext());
		current.setnext(null);
		current.setprev(null);
	}
	
	public int size() {
		if(header.getNext()==trailer) {
			return 0;
		}
		Dnode t=header.getNext();
		int count =0;
		while(t!=trailer) {
			count++;
			t=t.getNext();
		}
		return count ;
	}
	
	public ILinkedList sublist(int fromIndex, int toIndex) {
		int i=0;
		Dnode t=header.getNext();
		Double y = new Double();
		while(i<=toIndex) {
			if(i==fromIndex) {
				header.setnext(t);
				t.setprev(header);
			}
			if(i==toIndex) {
				t.setnext(trailer);
				trailer.setprev(t);
			}
			t=t.getNext();
		}
		return y;
	}
	
	public boolean contains(Object o) {
		Dnode t=header.getNext();
		if(header.getNext()==trailer) {
			return false;
		}
		while(t!=trailer) {
			if(t.getValue()==o) {
				return true;
			}
		}
		return false;
	}
	
	
	
	
	
	
	

}






package eg.edu.alexu.csd.datastructure.linkedList.cs41_cs13;

public interface IPolynomialSolver {
	
	
    void setPolynomial(char poly, int[][] terms);
	
	String print(char poly);
	
	void clearPolynomial(char poly);
	
	float evaluatePolynomial(char poly, float value);
	
	int[][] add(char poly1, char poly2);
	
	int[][] subtract(char poly1, char poly2);
	
	int[][] multiply(char poly1, char poly2);

}








package eg.edu.alexu.csd.datastructure.linkedList.cs41_cs13;

import java.awt.Point;
import static java.lang.Math.pow;

public class Polynomial implements IPolynomialSolver {
	single A=new single();
	single B=new single();
	single C=new single();
	single R=new single();
	
	public void setPolynomial(char poly, int[][] terms) {
		java.awt.Point [] a= new java.awt.Point [terms.length];
		
		int i=0,j=0;
		
		for (i=0;i<terms.length;i++) {
			a[i]=new java.awt.Point ();
		}
		for( i=0;i<terms.length;i++) {
			for( j=0;j<2;j++) {
				if(j==0) {
					a[i].x=terms[i][j];
				}
				a[i].y=terms[i][j];
			}
		}
			for( i=0;i<a.length;i++) {
				if(poly=='A') {
				A.add(i,a[i]);
				}else if(poly=='B') {
					B.add(i,a[i]);
				}else if(poly=='C') {
					C.add(i,a[i]);
				}
			}			
			
		}
	
	public String print(char poly) {
		node q=null;
		int i=0;
		int j=0;
		String a="" ;
       if(poly == 'A') {
    	    q=A.head;
    	    if(q==null) {
    	    	System.out.println("this polynomial is undet or cleared ");
    	    }else {
    	    while(q!=null) {
    	    	i++;
    	    	q=q.getNext();
    	    }
    	    java.awt.Point [] d = new java.awt.Point [i];
    	    for (j=0;j<i;j++) {
    			d[j]=new java.awt.Point ();
    		}
    	    q=A.head;
    	    for(j=0;j<i;j++) {
    	    	d[j]=(Point) q.getValue();
    	    	q=q.getNext();
    	    }
    	    q=A.head;
    	    for(j=0;j<i;j++) {
    	    	if(j==i-1) {
    	    		if(d[j].y!=0) {
    	    		a=a+ d[j].x + "x^" + d[j].y ;
    	    		}else {
    	    			a=a+ d[j].x ;
    	    		}
    	    	}else {
    	    		if(d[j].y!=0) {
        	    		a=a+ d[j].x + "x^" + d[j].y + "+" ;
        	    		}else {
        	    			a=a+ d[j].x + "+";
        	    		}
    	    	}
    	    	
    	    }
    	    }
       }else if(poly == 'B') {
    	    q=B.head;
    	    if(q==null) {
    	    	System.out.println("this polynomial is undset or cleared ");
    	    }else {
    	    while(q!=null) {
    	    	i++;
    	    	q=q.getNext();
    	    }
    	    java.awt.Point [] d = new java.awt.Point [i];
    	    for (j=0;j<i;j++) {
    			d[j]=new java.awt.Point ();
    		}
    	    q=B.head;
    	    for(j=0;j<i;j++) {
    	    	d[j]=(Point) q.getValue();
    	    	q=q.getNext();
    	    }
    	    q=B.head;
    	    for(j=0;j<i;j++) {
    	    	if(j==i-1) {
    	    		if(d[j].y!=0) {
    	    		a=a+ d[j].x + "x^" + d[j].y ;
    	    		}else {
    	    			a=a+ d[j].x ;
    	    		}
    	    	}else {
    	    		if(d[j].y!=0) {
        	    		a=a+ d[j].x + "x^" + d[j].y + "+" ;
        	    		}else {
        	    			a=a+ d[j].x + "+";
        	    		}
    	    	}
    	    	
    	    }
    	    }
       }else if(poly == 'C') {
    	    q = C.head;
    	    if(q==null) {
    	    	System.out.println("this polynomial is undet or cleared ");
    	    }else {
    	    while(q!=null) {
    	    	i++;
    	    	q=q.getNext();
    	    }
    	    java.awt.Point [] d = new java.awt.Point [i];
    	    for (j=0;j<i;j++) {
    			d[j]=new java.awt.Point ();
    		}
    	    q = C.head;
    	    for(j=0;j<i;j++) {
    	    	d[j]=(Point) q.getValue();
    	    	q=q.getNext();
    	    }
    	    q = C.head;
    	    for(j=0;j<i;j++) {
    	    	if(j==i-1) {
    	    		if(d[j].y!=0) {
    	    		a=a+ d[j].x + "x^" + d[j].y ;
    	    		}else {
    	    			a=a+ d[j].x ;
    	    		}
    	    	}else {
    	    		if(d[j].y!=0) {
        	    		a=a+ d[j].x + "x^" + d[j].y + "+" ;
        	    		}else {
        	    			a=a+ d[j].x + "+";
        	    		}
    	    	}
    	    	
    	    }
    	    }
       }else if(poly == 'R') {
    	    q = R.head;
    	    if(q==null) {
    	    	System.out.println("this polynomial is undet or cleared ");
    	    }else {
    	    while(q!=null) {
    	    	i++;
    	    	q=q.getNext();
    	    }
    	    java.awt.Point [] d = new java.awt.Point [i];
    	    for (j=0;j<i;j++) {
    			d[j]=new java.awt.Point ();
    		}
    	    q = R.head;
    	    for(j=0;j<i;j++) {
    	    	d[j]=(Point) q.getValue();
    	    	q=q.getNext();
    	    }
    	    q = R.head;
    	    for(j=0;j<i;j++) {
    	    	if(j==i-1) {
    	    		if(d[j].y!=0) {
    	    		a=a+ d[j].x + "x^" + d[j].y ;
    	    		}else {
    	    			a=a+ d[j].x ;
    	    		}
    	    	}else {
    	    		if(d[j].y!=0) {
        	    		a=a+ d[j].x + "x^" + d[j].y + "+" ;
        	    		}else {
        	    			a=a+ d[j].x + "+";
        	    		}
    	    	}
    	    	
    	    }
    	    }
       }    		
	return a;			
	}
	
	public void clearPolynomial(char poly) {
		if(poly == 'A') {
			A.clear();
			
		}else if(poly == 'B') {
			B.clear();
		}
		else if(poly == 'C') {
			C.clear();
		}
		else if(poly == 'R') {
			R.clear();
		}
	}
	
	public float evaluatePolynomial(char poly, float value) {
		node q=null;
		int i=0,j=0;
		float sum = 0;
		if(poly == 'A') {
			q=A.head;
			if(q==null) {
    	    	System.out.println("this polynomial is undet or cleared ");
    	    }else {
	    	    while(q!=null) {
	    	    	i++;
	    	    	q=q.getNext();
	    	    }
	    	    java.awt.Point [] d = new java.awt.Point [i];
	    	    for (j=0;j<i;j++) {
	    			d[j]=new java.awt.Point ();
	    		}
	    	    q = A.head;
	    	    for(j=0;j<i;j++) {
	    	    	d[j]=(Point) q.getValue();
	    	    	q=q.getNext();
	    	    }
	    	    
	    	    for (j=0;j<i;j++) {
	    	    	sum += ((d[j].x) *  pow(value , d[j].y)); 
	    	    }
			
    	    }
		}else if(poly == 'B') {
			q=B.head;
			if(q==null) {
    	    	System.out.println("this polynomial is undet or cleared ");
    	    }else {
    	    while(q!=null) {
    	    	i++;
    	    	q=q.getNext();
    	    }
    	    java.awt.Point [] d = new java.awt.Point [i];
    	    for (j=0;j<i;j++) {
    			d[j]=new java.awt.Point ();
    		}
    	    q = B.head;
    	    for(j=0;j<i;j++) {
    	    	d[j]=(Point) q.getValue();
    	    	q=q.getNext();
    	    }
    	    
    	    for (j=0;j<i;j++) {
    	    	sum += ((d[j].x) *  pow(value , d[j].y)); 
    	    }
		}
		}
		else if(poly == 'C') {
			q=C.head;
			if(q==null) {
    	    	System.out.println("this polynomial is undet or cleared ");
    	    }else {
    	    while(q!=null) {
    	    	i++;
    	    	q=q.getNext();
    	    }
    	    java.awt.Point [] d = new java.awt.Point [i];
    	    for (j=0;j<i;j++) {
    			d[j]=new java.awt.Point ();
    		}
    	    q = C.head;
    	    for(j=0;j<i;j++) {
    	    	d[j]=(Point) q.getValue();
    	    	q=q.getNext();
    	    }
    	    
    	    for (j=0;j<i;j++) {
    	    	sum += ((d[j].x) *  pow(value , d[j].y)); 
    	    }
    	    }
		}
		else if(poly == 'R') {
			q=R.head;
			if(q==null) {
    	    	System.out.println("this polynomial is undet or cleared ");
    	    }else {
    	    while(q!=null) {
    	    	i++;
    	    	q=q.getNext();
    	    }
    	    java.awt.Point [] d = new java.awt.Point [i];
    	    for (j=0;j<i;j++) {
    			d[j]=new java.awt.Point ();
    		}
    	    q = R.head;
    	    for(j=0;j<i;j++) {
    	    	d[j]=(Point) q.getValue();
    	    	q=q.getNext();
    	    }
    	    
    	    for (j=0;j<i;j++) {
    	    	sum += ((d[j].x) *  pow(value , d[j].y)); 
    	    }
		}
		}
		return sum;
		
	}
	
	public int[][] add(char poly1, char poly2){
		node q1 =null;
		node q2=null;
		int i1=0 , i2=0 , j=0 ,i=0;	
		if((poly1=='A'&&poly2=='B')||poly1=='B'&&poly2=='A') {
			q1=A.head;
			q2=B.head;
			if(q1==null||q2==null) {
				throw new IllegalArgumentException ("this polynomial is undet or cleared ");
			}else {
    	    while(q1!=null) {
    	    	i1++;
    	    	q1=q1.getNext();
    	    }
    	    java.awt.Point [] d1 = new java.awt.Point [i1];
    	    for (j=0;j<i1;j++) {
    			d1[j]=new java.awt.Point ();
    		}
    	    q1=A.head;
    	    for(j=0;j<i1;j++) {
    	    	d1[j]=(Point) q1.getValue();
    	    	q1=q1.getNext();
    	    }
    	    q2 = B.head;
    	    while(q2!=null) {
    	    	i2++;
    	    	q2=q2.getNext();
    	    }
    	    java.awt.Point [] d2 = new java.awt.Point [i2];
    	    for (j=0;j<i2;j++) {
    			d2[j]=new java.awt.Point ();
    		}
    	    q2=B.head;
    	    for(j=0;j<i2;j++) {
    	    	d2[j]=(Point) q2.getValue();
    	    	q2=q2.getNext();
    	    }
    	    
    	    
    	    int tt=0;
    	    for(i=0;i<d1.length;i++) {
    	    	for(j=0;j<d2.length;j++) {
    	    			if(R.contains(d1[i])==false) {
    	    			R.add(tt,d1[i]);
    	    			tt++;
    	    			}
    	    			if(R.contains(d2[j])==false) {
    	    			R.add(tt,d2[j]);
    	    			tt++;
    	    			}
    	    		
    	    	
    	    }
    	    }
    	    	  	
			}
		}else if((poly1=='A'&&poly2=='C')||poly1=='C'&&poly2=='A') {
			
			q1=A.head;
			q2=C.head;
			if(q1==null||q2==null) {
				throw new IllegalArgumentException ("this polynomial is undet or cleared ");
			}else {
    	    while(q1!=null) {
    	    	i1++;
    	    	q1=q1.getNext();
    	    }
    	    java.awt.Point [] d1 = new java.awt.Point [i1];
    	    for (j=0;j<i1;j++) {
    			d1[j]=new java.awt.Point ();
    		}
    	    q1=A.head;
    	    for(j=0;j<i1;j++) {
    	    	d1[j]=(Point) q1.getValue();
    	    	q1=q1.getNext();
    	    }
    	    q2 = C.head;
    	    while(q2!=null) {
    	    	i2++;
    	    	q2=q2.getNext();
    	    }
    	    java.awt.Point [] d2 = new java.awt.Point [i2];
    	    for (j=0;j<i2;j++) {
    			d2[j]=new java.awt.Point ();
    		}
    	    q2=C.head;
    	    for(j=0;j<i2;j++) {
    	    	d2[j]=(Point) q2.getValue();
    	    	q2=q2.getNext();
    	    }
    	    
    	    for(i=0;i<d1.length;i++) {
    	    	for(j=0;j<d2.length;j++) {
    	
    	    			if(!R.contains(d1[i])) {
    	    			R.add(d1[i]);
    	    			}
    	    			if(!R.contains(d2[j])) {
    	    			R.add(d2[j]);
    	    			}
    	    		
    	    	
    	    }
    	    }
    	   
		}
		}
		else if((poly1=='B'&&poly2=='C')||poly1=='C'&&poly2=='B') {
			q1=B.head;
			q2=C.head;
			if(q1==null||q2==null) {
				throw new IllegalArgumentException ("this polynomial is undet or cleared ");
			}else {
    	    while(q1!=null) {
    	    	i1++;
    	    	q1=q1.getNext();
    	    }
    	    java.awt.Point [] d1 = new java.awt.Point [i1];
    	    for (j=0;j<i1;j++) {
    			d1[j]=new java.awt.Point ();
    		}
    	    q1=B.head;
    	    for(j=0;j<i1;j++) {
    	    	d1[j]=(Point) q1.getValue();
    	    	q1=q1.getNext();
    	    }
    	    q2 = C.head;
    	    while(q2!=null) {
    	    	i2++;
    	    	q2=q2.getNext();
    	    }
    	    java.awt.Point [] d2 = new java.awt.Point [i2];
    	    for (j=0;j<i2;j++) {
    			d2[j]=new java.awt.Point ();
    		}
    	    q2=C.head;
    	    for(j=0;j<i2;j++) {
    	    	d2[j]=(Point) q2.getValue();
    	    	q2=q2.getNext();
    	    }
    	    for(i=0;i<d1.length;i++) {
    	    	for(j=0;j<d2.length;j++) {
    	    	
    	    			if(!R.contains(d1[i])) {
    	    			R.add(d1[i]);
    	    			}
    	    			if(!R.contains(d2[j])) {
    	    			R.add(d2[j]);
    	    			}   	    	
    	    }
    	    }
			
		}
		}
		node q=R.head;
	     int co=0;
	    while(q!=null) {
	    	co++;
	    	q=q.getNext();
	    }
	    java.awt.Point [] s = new java.awt.Point [co];
	    for (j=0;j<co;j++) {
			s[j]=new java.awt.Point ();
		}
	    q=R.head;
	    for(i=0;i<co;i++) {
	    	s[i]=(Point) q.getValue();
	    	q=q.getNext();
	    }
	    int k=0;
	    for(i = 0; i < co ; i++)
	    {
	        for(j = i+1; j < co; )
	        {
	            if(s[j].y == s[i].y)
	            {
	            	s[i].x+=s[j].x;
	                for(k = j; k < co -1; k++)
	                {
	                    s[k] = s[k+1];
	                }
	                co--;
	            }
	            else
	            {
	                j++;
	            }
	        }
	    }
	   
	    int flag=1;
        for (i=0;i<co&&flag==1;i++){
        	flag=0;
            for( j=0;j<co-i-1;j++){
                if(s[j].y>s[j+1].y){
                    java.awt.Point m=s[j];
                    s[j]=s[j+1];
                    s[j+1]=m;
                    flag=1;
                }
            }
        }
	    int[][] arr =new int [co][2] ;
	    int f=0;
	    for(i=0;i<co;i++) {
	    	for (j=0;j<2;j++) {
	    		if(j==0) {
	    			arr[i][j]=s[f].x;
	    		}else {
	    			arr[i][j]=s[f].y;  			
	    		}
	    		
	    }
	    	f++;
	    }
		
		return arr;
		}
	
	
	
	
	
	
	
	
	
	
	
	
	public int[][] subtract(char poly1, char poly2){
		node q1 =null;
		node q2=null;
		int i1=0 , i2=0 , j=0 ,i=0;	
		if((poly1=='A'&&poly2=='B')) {
			q1=A.head;
			q2=B.head;
			if(q1==null||q2==null) {
				throw new IllegalArgumentException ("this polynomial is undet or cleared ");
			}else {
    	    while(q1!=null) {
    	    	i1++;
    	    	q1=q1.getNext();
    	    }
    	    java.awt.Point [] d1 = new java.awt.Point [i1];
    	    for (j=0;j<i1;j++) {
    			d1[j]=new java.awt.Point ();
    		}
    	    q1=A.head;
    	    for(j=0;j<i1;j++) {
    	    	d1[j]=(Point) q1.getValue();
    	    	q1=q1.getNext();
    	    }
    	    q2 = B.head;
    	    while(q2!=null) {
    	    	i2++;
    	    	q2=q2.getNext();
    	    }
    	    java.awt.Point [] d2 = new java.awt.Point [i2];
    	    for (j=0;j<i2;j++) {
    			d2[j]=new java.awt.Point ();
    		}
    	    q2=B.head;
    	    for(j=0;j<i2;j++) {
    	    	d2[j]=(Point) q2.getValue();
    	    	q2=q2.getNext();
    	    }
    	    
    	    for(i=0;i<d1.length;i++) {
    	    	for(j=0;j<d2.length;j++) {
    	    		
    	    			if(!R.contains(d1[i])) {
    	    			R.add(d1[i]);
    	    			}
    	    			if(!R.contains(d2[j])) {
    	    			d2[j].x=-d2[j].x;
    	    			R.add(d2[j]);
    	    			}
    	    		
    	    	
    	    }
    	    }
    	    	 	
			}	
		}else if((poly1=='A'&&poly2=='C')) {
			
			q1=A.head;
			q2=C.head;
			if(q1==null||q2==null) {
				throw new IllegalArgumentException ("this polynomial is undet or cleared ");
			}else {
    	    while(q1!=null) {
    	    	i1++;
    	    	q1=q1.getNext();
    	    }
    	    java.awt.Point [] d1 = new java.awt.Point [i1];
    	    for (j=0;j<i1;j++) {
    			d1[j]=new java.awt.Point ();
    		}
    	    q1=A.head;
    	    for(j=0;j<i1;j++) {
    	    	d1[j]=(Point) q1.getValue();
    	    	q1=q1.getNext();
    	    }
    	    q2 = C.head;
    	    while(q2!=null) {
    	    	i2++;
    	    	q2=q2.getNext();
    	    }
    	    java.awt.Point [] d2 = new java.awt.Point [i2];
    	    for (j=0;j<i2;j++) {
    			d2[j]=new java.awt.Point ();
    		}
    	    q2=C.head;
    	    for(j=0;j<i2;j++) {
    	    	d2[j]=(Point) q2.getValue();
    	    	q2=q2.getNext();
    	    }
    	    
    	    for(i=0;i<d1.length;i++) {
    	    	for(j=0;j<d2.length;j++) {
    	   
    	    			if(!R.contains(d1[i])) {
    	    			R.add(d1[i]);
    	    			}
    	    			if(!R.contains(d2[j])) {
    	    			d2[j].x=-d2[j].x;
    	    			R.add(d2[j]);
    	    			}
    	    		
    	    
    	    }
    	    }
		}
		}
		else if((poly1=='B'&&poly2=='C')) {
			q1=B.head;
			q2=C.head;
			if(q1==null||q2==null) {
				throw new IllegalArgumentException ("this polynomial is undet or cleared ");
			}else {
    	    while(q1!=null) {
    	    	i1++;
    	    	q1=q1.getNext();
    	    }
    	    java.awt.Point [] d1 = new java.awt.Point [i1];
    	    for (j=0;j<i1;j++) {
    			d1[j]=new java.awt.Point ();
    		}
    	    q1=B.head;
    	    for(j=0;j<i1;j++) {
    	    	d1[j]=(Point) q1.getValue();
    	    	q1=q1.getNext();
    	    }
    	    q2 = C.head;
    	    while(q2!=null) {
    	    	i2++;
    	    	q2=q2.getNext();
    	    }
    	    java.awt.Point [] d2 = new java.awt.Point [i2];
    	    for (j=0;j<i2;j++) {
    			d2[j]=new java.awt.Point ();
    		}
    	    q2=C.head;
    	    for(j=0;j<i2;j++) {
    	    	d2[j]=(Point) q2.getValue();
    	    	q2=q2.getNext();
    	    }
    	    for(i=0;i<d1.length;i++) {
    	    	for(j=0;j<d2.length;j++) {
    	    	
    	    			if(!R.contains(d1[i])) {
    	    			R.add(d1[i]);
    	    			}
    	    			if(!R.contains(d2[j])) {
    	    			d2[j].x=-d2[j].x;
    	    			R.add(d2[j]);
    	    			}
    	    		
    	    	
    	    }
    	    }
			
		}
		}
		else if((poly1=='B'&&poly2=='A')) {
			q1=B.head;
			q2=A.head;
			if(q1==null||q2==null) {
				throw new IllegalArgumentException ("this polynomial is undet or cleared ");
			}else {
    	    while(q1!=null) {
    	    	i1++;
    	    	q1=q1.getNext();
    	    }
    	    java.awt.Point [] d1 = new java.awt.Point [i1];
    	    for (j=0;j<i1;j++) {
    			d1[j]=new java.awt.Point ();
    		}
    	    q1=B.head;
    	    for(j=0;j<i1;j++) {
    	    	d1[j]=(Point) q1.getValue();
    	    	q1=q1.getNext();
    	    }
    	    q2 = A.head;
    	    while(q2!=null) {
    	    	i2++;
    	    	q2=q2.getNext();
    	    }
    	    java.awt.Point [] d2 = new java.awt.Point [i2];
    	    for (j=0;j<i2;j++) {
    			d2[j]=new java.awt.Point ();
    		}
    	    q2=A.head;
    	    for(j=0;j<i2;j++) {
    	    	d2[j]=(Point) q2.getValue();
    	    	q2=q2.getNext();
    	    }
    	   
    	    for(i=0;i<d1.length;i++) {
    	    	for(j=0;j<d2.length;j++) {
    	    			if(!R.contains(d1[i])) {
    	    			R.add(d1[i]);
    	    			}
    	    			if(!R.contains(d2[j])) {
    	    			d2[j].x=-d2[j].x;
    	    			R.add(d2[j]);
    	    			}
    	    		
    	    	
    	    }
    	    }
			
		}
		}
		
		else if((poly1=='C'&&poly2=='A')) {
			q1=C.head;
			q2=A.head;
			if(q1==null||q2==null) {
				throw new IllegalArgumentException ("this polynomial is undet or cleared ");
			}else {
    	    while(q1!=null) {
    	    	i1++;
    	    	q1=q1.getNext();
    	    }
    	    java.awt.Point [] d1 = new java.awt.Point [i1];
    	    for (j=0;j<i1;j++) {
    			d1[j]=new java.awt.Point ();
    		}
    	    q1=C.head;
    	    for(j=0;j<i1;j++) {
    	    	d1[j]=(Point) q1.getValue();
    	    	q1=q1.getNext();
    	    }
    	    q2 = A.head;
    	    while(q2!=null) {
    	    	i2++;
    	    	q2=q2.getNext();
    	    }
    	    java.awt.Point [] d2 = new java.awt.Point [i2];
    	    for (j=0;j<i2;j++) {
    			d2[j]=new java.awt.Point ();
    		}
    	    q2=A.head;
    	    for(j=0;j<i2;j++) {
    	    	d2[j]=(Point) q2.getValue();
    	    	q2=q2.getNext();
    	    }
    	 
    	    for(i=0;i<d1.length;i++) {
    	    	for(j=0;j<d2.length;j++) {
    	    		
    	    			if(!R.contains(d1[i])) {
    	    			R.add(d1[i]);
    	    			}
    	    			if(!R.contains(d2[j])) {
    	    			d2[j].x=-d2[j].x;
    	    			R.add(d2[j]);
    	    			}
    	    		
    	    	
    	    }
    	    }
			
		}
		}
		else if((poly1=='C'&&poly2=='B')) {
			q1=C.head;
			q2=B.head;
			if(q1==null||q2==null) {
				throw new IllegalArgumentException ("this polynomial is undet or cleared ");
			}else {
    	    while(q1!=null) {
    	    	i1++;
    	    	q1=q1.getNext();
    	    }
    	    java.awt.Point [] d1 = new java.awt.Point [i1];
    	    for (j=0;j<i1;j++) {
    			d1[j]=new java.awt.Point ();
    		}
    	    q1=C.head;
    	    for(j=0;j<i1;j++) {
    	    	d1[j]=(Point) q1.getValue();
    	    	q1=q1.getNext();
    	    }
    	    q2 = B.head;
    	    while(q2!=null) {
    	    	i2++;
    	    	q2=q2.getNext();
    	    }
    	    java.awt.Point [] d2 = new java.awt.Point [i2];
    	    for (j=0;j<i2;j++) {
    			d2[j]=new java.awt.Point ();
    		}
    	    q2=B.head;
    	    for(j=0;j<i2;j++) {
    	    	d2[j]=(Point) q2.getValue();
    	    	q2=q2.getNext();
    	    }
    	  
    	    for(i=0;i<d1.length;i++) {
    	    	for(j=0;j<d2.length;j++) {
  
    	    			if(!R.contains(d1[i])) {
    	    			R.add(d1[i]);
    	    			}
    	    			if(!R.contains(d2[j])) {
    	    			d2[j].x=-d2[j].x;
    	    			R.add(d2[j]);
    	    			}
    	    		
    	    	
    	    }
    	    }
    	   
		}
		}
		node q=R.head;
	    int co=0;
	    while(q!=null) {
	    	co++;
	    	q=q.getNext();
	    }
	    java.awt.Point [] s = new java.awt.Point [co];
	    for (j=0;j<i1;j++) {
			s[j]=new java.awt.Point ();
		}
	    q=R.head;
	    int k=0;
	    for(i=0;i<co;i++) {
	    	s[i]=(Point) q.getValue();
	    	q=q.getNext();
	    }
	    for(i = 0; i < co ; i++)
	    {
	        for(j = i+1; j < co; )
	        {
	            if(s[j].y == s[i].y)
	            {
	            	s[i].x+=s[j].x;
	                for(k = j; k < co -1; k++)
	                {
	                    s[k] = s[k+1];
	                }
	                co--;
	            }
	            else
	            {
	                j++;
	            }
	        }
	    }
	    int flag=1;
        for (i=0;i<co&&flag==1;i++){
        	flag=0;
            for( j=0;j<co-i-1;j++){
                if(s[j].y>s[j+1].y){
                    java.awt.Point m=s[j];
                    s[j]=s[j+1];
                    s[j+1]=m;
                    flag=1;
                }
            }
        }
	    int[][] arr =new int [co][2] ;
	    int f=0;
	    for(i=0;i<co;i++) {
	    	for (j=0;j<2;j++) {
	    		if(j==0) {
	    			arr[i][j]=s[f].x;
	    		}else {
	    			arr[i][j]=s[f].y;
	    		}
	    		
	    }
	    	f++;
	    }
		
		return arr;
		}
	
	
	
	
	
	
	
	
	
	
	
	
	public int[][] multiply(char poly1, char poly2){
		
		node q1 =null;
		node q2=null;
		int i1=0 , i2=0 , j=0 ,i=0;	
		if((poly1=='A'&&poly2=='B')||poly1=='B'&&poly2=='A') {
			q1=A.head;
			q2=B.head;
			if(q1==null||q2==null) {
				throw new IllegalArgumentException ("this polynomial is undet or cleared ");
			}else {
    	    while(q1!=null) {
    	    	i1++;
    	    	q1=q1.getNext();
    	    }
    	    java.awt.Point [] d1 = new java.awt.Point [i1];
    	    for (j=0;j<i1;j++) {
    			d1[j]=new java.awt.Point ();
    		}
    	    q1=A.head;
    	    for(j=0;j<i1;j++) {
    	    	d1[j]=(Point) q1.getValue();
    	    	q1=q1.getNext();
    	    }
    	    q2 = B.head;
    	    while(q2!=null) {
    	    	i2++;
    	    	q2=q2.getNext();
    	    }
    	    java.awt.Point [] d2 = new java.awt.Point [i2];
    	    for (j=0;j<i2;j++) {
    			d2[j]=new java.awt.Point ();
    		}
    	    q2=B.head;
    	    for(j=0;j<i2;j++) {
    	    	d2[j]=(Point) q2.getValue();
    	    	q2=q2.getNext();
    	    }
    	    
    	    Point qq=new Point();
    	    int tt=0;
    	    for(i=0;i<d1.length;i++) {
    	    	qq.x=0;
    	    	qq.y=0;
    	    	for(j=0;j<d2.length;j++) {
    	    		
    	    		qq.x=(d1[i].x * d2[j].x);
    	    		qq.y=(d1[i].y+ d2[j].y);
    	    		R.add(tt,qq);
    	    		tt++;
    	    		  	   	    		
    	    }
    	    	
    	    }
    	    	  	
			}
		}else if((poly1=='A'&&poly2=='C')||poly1=='C'&&poly2=='A') {
			
			q1=A.head;
			q2=C.head;
			if(q1==null||q2==null) {
				throw new IllegalArgumentException ("this polynomial is undet or cleared ");
			}else {
    	    while(q1!=null) {
    	    	i1++;
    	    	q1=q1.getNext();
    	    }
    	    java.awt.Point [] d1 = new java.awt.Point [i1];
    	    for (j=0;j<i1;j++) {
    			d1[j]=new java.awt.Point ();
    		}
    	    q1=A.head;
    	    for(j=0;j<i1;j++) {
    	    	d1[j]=(Point) q1.getValue();
    	    	q1=q1.getNext();
    	    }
    	    q2 = C.head;
    	    while(q2!=null) {
    	    	i2++;
    	    	q2=q2.getNext();
    	    }
    	    java.awt.Point [] d2 = new java.awt.Point [i2];
    	    for (j=0;j<i2;j++) {
    			d2[j]=new java.awt.Point ();
    		}
    	    q2=C.head;
    	    for(j=0;j<i2;j++) {
    	    	d2[j]=(Point) q2.getValue();
    	    	q2=q2.getNext();
    	    }
    	    
    	    int tt=0;
    	    Point qq=new Point ();
    	    for(i=0;i<d1.length;i++) {
    	    	for(j=0;j<d2.length;j++) {
    	    		qq.x+=d1[i].x * d2[j].x;
    	    		qq.y+=d1[i].y+ d2[j].y;
    	    		
    	    		R.add(tt,qq);
    	    		tt++;
    	    }
    	    }
    	   
		}
		}
		else if((poly1=='B'&&poly2=='C')||poly1=='C'&&poly2=='B') {
			q1=B.head;
			q2=C.head;
			if(q1==null||q2==null) {
				throw new IllegalArgumentException ("this polynomial is undet or cleared ");
			}else {
    	    while(q1!=null) {
    	    	i1++;
    	    	q1=q1.getNext();
    	    }
    	    java.awt.Point [] d1 = new java.awt.Point [i1];
    	    for (j=0;j<i1;j++) {
    			d1[j]=new java.awt.Point ();
    		}
    	    q1=B.head;
    	    for(j=0;j<i1;j++) {
    	    	d1[j]=(Point) q1.getValue();
    	    	q1=q1.getNext();
    	    }
    	    q2 = C.head;
    	    while(q2!=null) {
    	    	i2++;
    	    	q2=q2.getNext();
    	    }
    	    java.awt.Point [] d2 = new java.awt.Point [i2];
    	    for (j=0;j<i2;j++) {
    			d2[j]=new java.awt.Point ();
    		}
    	    q2=C.head;
    	    for(j=0;j<i2;j++) {
    	    	d2[j]=(Point) q2.getValue();
    	    	q2=q2.getNext();
    	    }
    	   int tt=0;
    	    Point qq=new Point();
    	    for(i=0;i<d1.length;i++) {
    	    	for(j=0;j<d2.length;j++) {
    	    		qq.x+=d1[i].x * d2[j].x;
    	    		qq.y+=d1[i].y+ d2[j].y;
    	    		
    	    		R.add(tt,qq);
    	    		tt++;
    	    }
    	    }
			
		}
		}
		node q=R.head;	
	    int co=0;
	    int k=0;
	    while(q!=null) {
	    	co++;
	    	q=q.getNext();
	    }
	    java.awt.Point [] s = new java.awt.Point [co];
	    for (j=0;j<i1;j++) {
			s[j]=new java.awt.Point ();
		}
	    q=R.head;
	    for(i=0;i<co;i++) {
	    	s[i]=(Point) q.getValue();
	    	q=q.getNext();
	    }
	    
	    for(i = 0; i < co ; i++)
	    {
	        for(j = i+1; j < co; )
	        {
	            if(s[j].y == s[i].y)
	            {
	            	s[i].x+=s[j].x;
	                for(k = j; k < co-1; k++)
	                {
	                    s[k] = s[k+1];
	                }
	                co--;
	            }
	            else
	            {
	                j++;
	            }
	        }
	    }
	    
	    int flag=1;
        for (i=0;i<co&&flag==1;i++){
        	flag=0;
            for( j=0;j<co-i-1;j++){
                if(s[j].y>s[j+1].y){
                    java.awt.Point m=s[j];
                    s[j]=s[j+1];
                    s[j+1]=m;
                    flag=1;
                }
            }
        }
	    int[][] arr =new int [co][2] ;
	    int f=0;
	    for(i=0;i<co;i++) {
	    	for (j=0;j<2;j++) {
	    		if(j==0) {
	    			arr[i][j]=s[f].x;
	    		}else {
	    			arr[i][j]=s[f].y;
	    		}
	    		
	    }
	    	f++;
	    }
		
		return arr;
		}
		
	
	

	
	
	
		
	}
	
  
  
  
  
  
  
  
  		
  		
  		

		
			
			
		
		
	

	
		
